"""
Adapted from keras example cifar10_cnn.py
Train ResNet-18 on the CIFAR10 small images dataset.

GPU run command with Theano backend (with TensorFlow, the GPU is automatically used):
    THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python cifar10.py
"""
from __future__ import print_function
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import np_utils
from keras.callbacks import ReduceLROnPlateau, CSVLogger, EarlyStopping

import numpy as np
import resnet
import dataLoad
import dataLoad2

lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1), cooldown=0, patience=5, min_lr=0.5e-6)
early_stopper = EarlyStopping(min_delta=0.001, patience=10)
csv_logger = CSVLogger('resnet__nn.csv')
batch_size = 32
nb_classes = 5
nb_epoch = 100
data_augmentation = True

# input image dimensions
# img_rows, img_cols = 32, 32
img_rows, img_cols = 64, 64
# The CIFAR10 images are RGB.
# img_channels = 3
img_channels = 3


# save mean
mean_image=np.load(open('mean1.npy','rb'))


model = resnet.ResnetBuilder.build_resnet_18((img_channels, img_rows, img_cols), nb_classes)
# model = resnet.ResnetBuilder.build_resnet_34((img_channels, img_rows, img_cols), nb_classes)
# model = resnet.ResnetBuilder.build_resnet_50((img_channels, img_rows, img_cols), nb_classes)
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


model.load_weights('perimt1.h5')

    # saver = model.save_weights('my_model_weights_e120_res34_128_128.h5')

    # Fit the model on the batches generated by datagen.flow().
    # model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),
    #                     steps_per_epoch=X_train.shape[0] // batch_size,
    #                     validation_data=(X_test, Y_test),
    #                     epochs=nb_epoch, verbose=1, max_q_size=100,
    #                     callbacks=[lr_reducer, early_stopper, csv_logger])
    # model.save_weights('perimt.h5')
X_testr,_,testDict = dataLoad2.dataload("d:/data/permit/test",img_rows,img_cols,gray=0)
import cv2

X_testr = X_testr.astype('float32')
X_testre =  X_testr.astype('int32')
    # subtract mean and normalize
X_testr -= mean_image
X_testr /= 128.



classes = model.predict(X_testr, batch_size=128)
output=dict()


    # 写入数据

    # 写入的内容都是以列表的形式传入函数
for index,value in enumerate(classes):
    cv2.imwrite('c:/tempProjects/keras-resnet/vali9/'+str(testDict[np.argmax(value)+1])+'_'+str(index)+'.jpg', X_testre[index])

print("write over")

print()